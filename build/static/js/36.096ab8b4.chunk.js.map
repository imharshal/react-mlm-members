{"version":3,"sources":["views/plans/AllPlansCard.js","views/plans/ActivePlanCard.js","views/plans/Plans.js","configs/apiConfig.js"],"names":["MyAlert","withReactContent","Swal","AllPlansCard","plans","map","plan","index","Col","md","sm","Card","className","CardHeader","price","Badge","id","color","validity","UncontrolledTooltip","placement","target","CardBody","daily_income","Button","Ripple","onClick","plan_id","member","JSON","parse","localStorage","getItem","Data","member_id","plan_details","filter","x","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","cancelButton","confirmButton","buttonsStyling","then","result","isConfirmed","axios","post","api","routes","purchase_plan","auth","response","data","success","window","location","reload","message","isDismissed","isDenied","handlePlanPurchase","block","ActivePlanCard","joining","withdraw_limit","Plans","useState","Packages","setPackages","ActivePackage","setActivePackages","useEffect","updateProfile","get","catch","error","active_plan","getUserId","e","CardTitle","Row","baseUrl","apiToken","useJwt","getToken","header","Authorization","setItem","stringify","user","console","log","headers","auth_token","signup","change_password","bank_account","withdraw","transfer_fund","initiate_payment","complete_payment","member_list","profile","password_reset_link","verify_password_link","notifications","statistics","tree","members_in_levels","members_in_levels_count","payment_options","payment_qr","transactions_history","fund_history","withdrawal_history","level_income_history","daily_income_history","direct_income_history","reward_income_history"],"mappings":"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","file":"static/js/36.096ab8b4.chunk.js","sourcesContent":["// ** Reactstrap\nimport { Fragment } from 'react'\nimport { Card, Row, CardHeader, CardBody, Col, Badge, UncontrolledTooltip, Button } from 'reactstrap'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport axios from 'axios'\nimport api from '../../configs/apiConfig'\nconst MyAlert = withReactContent(Swal)\n\nconst AllPlansCard = ({ plans }) => {\n  const handlePlanPurchase = (plan_id) => {\n    const member = JSON.parse(localStorage.getItem('userData'))\n    const Data = {\n      member_id: member['id'],\n      plan_id\n    }\n    const plan_details = plans.filter(x => x.plan_id === plan_id)[0]\n    // console.log(plan_details)\n\n    MyAlert.fire({\n      title: 'Are you sure to purchase this plan?',\n      text: 'The amount will be deducted from your fund account',\n      icon: 'info',\n      showCancelButton: 'No, Cancel',\n      confirmButtonText: 'Yes',\n\n      customClass: {\n        cancelButton: 'ml-2 btn btn-danger',\n        confirmButton: 'btn btn-primary'\n      },\n      buttonsStyling: false\n    }).then((result) => {\n      if (result.isConfirmed) {\n        // console.log(Data)\n        axios\n          .post(api.routes.post.purchase_plan, Data, api.auth)\n          .then(response => {\n            // console.log(response)\n            if (response.data.success === true) {\n              MyAlert.fire({\n                title: 'Congratulations!',\n                text: `Package Rs ${plan_details.price} purchased successfully \\n Username: [${member[\"username\"]}] activated successfully`,\n                icon: 'success',\n                confirmButtonText: 'OK',\n                customClass: {\n                  confirmButton: 'mr-1 btn btn-primary'\n                },\n                buttonsStyling: false\n              }).then(() => {\n                window.location.reload()\n              })\n\n              // Swal.fire('Congratulations!', `Package Rs ${plan_details.price} purchased successfully <br /> Username: [${member[\"username\"]}] activated successfully`, 'success')\n\n            }\n            if (response.data.success === false) Swal.fire('Plan purchase failed!', response.data.message, 'error')\n\n\n            // response.data.data.push({ id: 0, username: \"admin\", fullname: \"Kavyansh Kumar\" })\n            //  if (response.data.data.length === 0) setLeadList([{ username: \"admin\", fullname: \"Avinash Shete\" }])\n            // console.log(response.data.data)\n            // setLeadList(response.data.data)\n          })\n      }\n      if (result.isDismissed || result.isDenied) {\n\n      }\n    })\n\n    // console.log(plan_id)\n\n  }\n  return (\n    // console.log(plans),\n    <Fragment>\n      {plans.map((plan, index) => {\n        return (\n          <Col md=\"3\" sm=\"12\" key={index} >\n            <Card className='plan-card border-primary' key={index}>\n              <CardHeader className='d-flex justify-content-between align-items-center pt-75 pb-1'>\n                <h2 className='mb-0'>{`Rs ${plan.price}`}</h2>\n                <Badge id='plan-expiry-date' color='light-secondary'>\n                  {`${plan.validity} days`}\n                </Badge>\n                <UncontrolledTooltip placement='top' target='plan-expiry-date'>\n                  Validity (in days)\n                </UncontrolledTooltip>\n              </CardHeader>\n              <CardBody>\n\n                <ul className='list-unstyled my-1 mb-5'>\n\n                  <li className='my-25'>\n                    <span className='align-middle'><strong>Daily Income:</strong> {plan.daily_income} Rs/Day</span>\n                  </li>\n\n                </ul>\n\n                <Button.Ripple className='text-center' onClick={() => handlePlanPurchase(plan.plan_id)} color='primary' block>\n                  Select Plan\n                </Button.Ripple>\n              </CardBody>\n            </Card>\n          </Col>\n        )\n      })}\n    </Fragment>\n  )\n}\n\nexport default AllPlansCard\n","// ** Reactstrap\r\nimport { Card, CardHeader, CardBody, Badge, UncontrolledTooltip, Button } from 'reactstrap'\r\n\r\nconst ActivePlanCard = ({ plan }) => {\r\n  return (\r\n    <Card className='col-md-4 bg-primary text-white'>\r\n      <CardHeader className=' d-flex justify-content-between align-items-center pt-75 pb-1'>\r\n        <h4 className='mb-0 text-white font-weight-bold'>Current Plan</h4>\r\n        <Badge id='plan-expiry-date' color='light-primary' className=\"bg-white\">\r\n          Valid till: {plan.validity}\r\n        </Badge>\r\n        <UncontrolledTooltip placement='top' target='plan-expiry-date'>\r\n          Expiry Date\r\n        </UncontrolledTooltip>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {/* <Badge className='text-capitalize' color='light-primary'>\r\n          {console.log(selectedUser)}\r\n          {selectedUser !== null ? selectedUser.plan : 'Basic'}\r\n        </Badge> */}\r\n        <ul className='list-unstyled my-1'>\r\n          <li>\r\n            <span className='h4 align-middle font-weight-bold text-white'> Rs {plan.price}</span>\r\n          </li>\r\n          <li className='my-25'>\r\n            <span className='align-middle'><strong>Joining:</strong> {plan.joining}</span>\r\n          </li>\r\n          <li className='my-25'>\r\n            <span className='align-middle'><strong>Daily Income:</strong> {plan.daily_income} Rs/Day</span>\r\n          </li>\r\n          <li>\r\n            <span className='align-middle'><strong>Withdraw Limit:</strong> Rs {plan.withdraw_limit}</span>\r\n          </li>\r\n        </ul>\r\n        {/* <Button.Ripple className='text-center' color='primary' block>\r\n          Upgrade Plan\r\n        </Button.Ripple> */}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ActivePlanCard\r\n","import { Row, Col, Card, CardBody, CardHeader, CardTitle } from 'reactstrap'\r\nimport AllPlansCard from './AllPlansCard'\r\nimport ActivePlanCard from './ActivePlanCard'\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport api, { getUserId } from '@configs/apiConfig'\r\nimport { updateProfile } from '../../configs/apiConfig'\r\nimport { memberExpression } from '@babel/types'\r\n\r\nconst MyAlert = withReactContent(Swal)\r\n\r\nconst data = [\r\n\r\n  {\r\n    price: \"999\",\r\n    expiry: 100,\r\n    daily_income: 25\r\n  },\r\n  {\r\n    price: \"1999\",\r\n    expiry: 100,\r\n    daily_income: 50\r\n  },\r\n  {\r\n    price: \"2999\",\r\n    expiry: 100,\r\n    daily_income: 75\r\n  },\r\n  {\r\n    price: \"3999\",\r\n    expiry: 100,\r\n    daily_income: 100\r\n  },\r\n  {\r\n    price: \"4999\",\r\n    expiry: 100,\r\n    daily_income: 125\r\n  },\r\n  {\r\n    price: \"5999\",\r\n    expiry: 100,\r\n    daily_income: 150\r\n  },\r\n  {\r\n    price: \"6999\",\r\n    expiry: 100,\r\n    daily_income: 175\r\n  },\r\n  {\r\n    price: \"7999\",\r\n    expiry: 100,\r\n    daily_income: 200\r\n  }\r\n]\r\n\r\n\r\nconst Plans = () => {\r\n\r\n  const [Packages, setPackages] = useState([])\r\n  const [ActivePackage, setActivePackages] = useState([])\r\n  useEffect(() => {\r\n    updateProfile()\r\n    try {\r\n      axios\r\n        .get(api.routes.get.plans, api.auth)\r\n        .then(response => {\r\n          setPackages(response.data.data)\r\n        })\r\n        .catch(error => {\r\n          // console.log(error.response)\r\n          MyAlert.fire('Network Error', 'Kindly check your internet connection', 'error')\r\n        })\r\n\r\n      axios\r\n        .get(`${api.routes.get.active_plan}/${getUserId()}`, api.auth)\r\n        .then(response => {\r\n          if (response.data.success) {\r\n            setActivePackages(response.data.data)\r\n\r\n          }\r\n          // console.log(response)\r\n        })\r\n        .catch(error => {\r\n          Swal.fire('No plan active!', 'Kindly purchase any plan to get more services', 'info')\r\n\r\n        })\r\n\r\n    } catch (e) {\r\n      MyAlert.fire('Invalid Request', 'Kindly relogin to fix this issue', 'error')\r\n    }\r\n\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <Card className=\"container\">\r\n\r\n      <CardHeader>\r\n        {ActivePackage && ActivePackage.validity && <CardTitle>Active</CardTitle>}\r\n      </CardHeader>\r\n      <CardBody className=\"\">\r\n        <Row>\r\n          {ActivePackage && ActivePackage.validity && <ActivePlanCard plan={ActivePackage} />}\r\n        </Row>\r\n\r\n        {<CardHeader >\r\n          <CardTitle>All Plan</CardTitle>\r\n        </CardHeader>\r\n        }\r\n        <Row>\r\n          {<AllPlansCard plans={Packages} />}\r\n        </Row>\r\n      </CardBody>\r\n    </Card>\r\n    // \"hello\"\r\n  )\r\n}\r\n\r\nexport default Plans\r\n","import useJwt from '@src/auth/jwt/useJwt'\r\nimport axios from 'axios'\r\nimport { useState, useEffect } from 'react'\r\n//also change url for JWT auth\r\n// const baseUrl = \"http://cashmind-api.test/api/v1\"\r\nconst baseUrl = \"https://api.cashmind.in/api/v1\"\r\nconst apiToken = useJwt.getToken()\r\nconst userData = () => JSON.parse(localStorage.getItem('userData'))\r\n\r\nconst auth = {\r\n    header: { Authorization: `Bearer ${apiToken}` },\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n    \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\r\n\r\n}\r\nconst headers = {\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n    \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\r\n}\r\n// const [ProfileData, setProfileData] = useState(null)\r\nconst updateProfile = () => {\r\n    try {\r\n        axios\r\n            .get(`${baseUrl}/profile`, auth)\r\n            .then(response => {\r\n                // setProfileData(response.data.user)\r\n                localStorage.setItem('userData', JSON.stringify(response.data.user))\r\n                return true\r\n            })\r\n\r\n    } catch (e) {\r\n        console.log(e)\r\n        // MyAlert.fire('Invalid Request', 'Kindly relogin to fix this issue', 'error')\r\n    }\r\n}\r\n\r\nconst getUserId = () => {\r\n    try {\r\n        return JSON.parse(localStorage.getItem('userData')).id\r\n    } catch (e) {\r\n        return \"\"\r\n    }\r\n\r\n}\r\nconst api = {\r\n\r\n    baseUrl,\r\n    auth,\r\n    headers,\r\n    auth_token: `${apiToken}`,\r\n    routes: {\r\n        post: {\r\n            signup: `${baseUrl}/signup`,\r\n            change_password: `${baseUrl}/change-password`,\r\n            bank_account: `${baseUrl}/bank-account`, //requires auth\r\n            purchase_plan: `${baseUrl}/purchase-plan`, //requires auth // requires /{plan_id} and member_id in post\r\n            withdraw: `${baseUrl}/withdraw-fund`, //requires auth\r\n            transfer_fund: `${baseUrl}/fund-transfer`, //requires auth\r\n            initiate_payment: `${baseUrl}/initiate-payment`, //requires auth\r\n            complete_payment: `${baseUrl}/complete-payment` //requires auth\r\n        },\r\n        get: {\r\n            member_list: `${baseUrl}/member/list`,\r\n            profile: `${baseUrl}/profile`, //requires auth\r\n            password_reset_link: `${baseUrl}/password-reset-link`, //requires auth\r\n            verify_password_link: `${baseUrl}/verify-password-link`, //requires auth\r\n            notifications: `${baseUrl}/notifications`, //requires auth\r\n            statistics: `${baseUrl}/statistics`, //requires auth\r\n            tree: `${baseUrl}/tree`, //requires auth\r\n            members_in_levels: `${baseUrl}/members-in-levels`, //requires auth\r\n            members_in_levels_count: `${baseUrl}/members-in-levels-count`, //requires auth\r\n            bank_account: `${baseUrl}/bank-account`, //requires auth\r\n            payment_options: `${baseUrl}/payment-options/${getUserId()}`, //requires auth\r\n            payment_qr: `${baseUrl}/payment-qr/${getUserId()}`, //requires auth\r\n            plans: `${baseUrl}/plans`, //requires auth\r\n            active_plan: `${baseUrl}/active-plan`, //requires auth\r\n            transactions_history: `${baseUrl}/transactions-history}`, //requires auth\r\n            fund_history: `${baseUrl}/fund-wallet-history`, //requires auth\r\n            withdrawal_history: `${baseUrl}/withdrawal-history`, //requires auth\r\n            level_income_history: `${baseUrl}/level-income-history`, //requires auth\r\n            daily_income_history: `${baseUrl}/daily-income-history`, //requires auth\r\n            direct_income_history: `${baseUrl}/direct-income-history`, //requires auth\r\n            reward_income_history: `${baseUrl}/reward-income-history` //requires auth\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default api\r\nexport { updateProfile, getUserId }\r\n\r\n//way to import this\r\n// import api from '@configs/apiConfig'\r\n"],"sourceRoot":""}