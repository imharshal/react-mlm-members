{"version":3,"sources":["views/pages/Login.js"],"names":["ToastContent","name","role","className","size","color","icon","split","LoginSchema","yup","shape","username","required","password","min","Login","props","useForm","mode","resolver","yupResolver","register","handleSubmit","errors","control","setValue","getValues","formState","trigger","useSkin","skin","dispatch","useContext","AbilityContext","useDispatch","history","useHistory","useState","Loading","setLoading","illustration","source","require","default","to","onClick","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","onSubmit","data","isObjEmpty","useJwt","login","then","res","blocked","Swal","fire","success","user","accessToken","token","refreshToken","handleLogin","push","toast","fullname","transition","Slide","hideProgressBar","autoClose","catch","err","for","type","classnames","placeholder","message","title","input","inputAttributes","autocapitalize","confirmButtonText","showCancelButton","showLoaderOnConfirm","customClass","confirmButton","cancelButton","preConfirm","email","axios","get","api","routes","password_reset_link","response","showValidationMessage","error","console","log","allowOutsideClick","isLoading","result","isConfirmed","value","imageUrl","avatar_url","label","Ripple","block","disabled"],"mappings":"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","file":"static/js/39.f34e9b7f.chunk.js","sourcesContent":["import { useState, useContext, useEffect, Fragment } from 'react'\r\nimport classnames from 'classnames'\r\nimport Avatar from '@components/avatar'\r\nimport { useSkin } from '@hooks/useSkin'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm, Controller, set } from 'react-hook-form'\r\nimport { toast, Slide } from 'react-toastify'\r\nimport { handleLogin } from '@store/actions/auth'\r\nimport { AbilityContext } from '@src/utility/context/Can'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\nimport { getHomeRouteForLoggedInUser, isObjEmpty } from '@utils'\r\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee, AlertCircle } from 'react-feather'\r\nimport * as yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\n// import Spinner from '../../@core/components/spinner/Fallback-spinner'\r\n\r\nimport {\r\n  Alert,\r\n  Row,\r\n  Col,\r\n  CardTitle,\r\n  CardText,\r\n  Form,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  CustomInput,\r\n  Button,\r\n  UncontrolledTooltip,\r\n  FormFeedback,\r\n  Spinner\r\n} from 'reactstrap'\r\n\r\nimport Swal from 'sweetalert2'\r\nimport api from '../../configs/apiConfig'\r\nimport axios from 'axios'\r\nimport '@styles/base/pages/page-auth.scss'\r\n\r\nconst ToastContent = ({ name, role }) => (\r\n  <Fragment>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\r\n        <h6 className='toast-title font-weight-bold'>Welcome, {name.split(' ')[0]}</h6>\r\n      </div>\r\n    </div>\r\n    <div className='toastify-body'>\r\n      <span>You have successfully logged in.</span>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst ErrorToast = () => (\r\n  <Fragment>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='danger' icon={<AlertCircle size={12} />} />\r\n        <h6 className='toast-title font-weight-bold'>Login failed</h6>\r\n      </div>\r\n    </div>\r\n    <div className='toastify-body'>\r\n      <span>Invalid username or password</span>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst NetworkErrorToast = () => (\r\n  <Fragment>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='danger' icon={<AlertCircle size={12} />} />\r\n        <h6 className='toast-title font-weight-bold'>Network issue</h6>\r\n      </div>\r\n    </div>\r\n    <div className='toastify-body'>\r\n      <span>Please check your network connection</span>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst LoginSchema = yup.object().shape({\r\n  username: yup.string().required(\"Username is required\"),\r\n  password: yup.string().min(6, \"Minimum 6 characters required\").required(\"Password is required\")\r\n})\r\n\r\nconst Login = props => {\r\n\r\n  const { register, handleSubmit, control, setValue, getValues, formState: { errors }, trigger } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(LoginSchema)\r\n  })\r\n\r\n  const [skin, setSkin] = useSkin()\r\n  const ability = useContext(AbilityContext)\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  const [Loading, setLoading] = useState(false)\r\n\r\n  // const { register, errors, handleSubmit } = useForm()\r\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\r\n    source = require(`@src/assets/images/pages/${illustration}`).default\r\n\r\n  // useEffect(() => {\r\n\r\n  //   console.log(username)\r\n  //   console.log(password)\r\n  // }, [])\r\n\r\n  const handleForgotPassword = () => {\r\n    Swal.fire({\r\n      title: 'Enter your registered email',\r\n      icon: 'info',\r\n      input: 'email',\r\n      inputAttributes: {\r\n        autocapitalize: 'off'\r\n      },\r\n      confirmButtonText: 'Reset Password',\r\n      showCancelButton: true,\r\n      showLoaderOnConfirm: true,\r\n      customClass: {\r\n        confirmButton: 'btn btn-primary ',\r\n        cancelButton: 'ml-sm-1 btn btn-danger'\r\n      },\r\n      preConfirm: (email) => {\r\n        return axios.get(`${api.routes.get.password_reset_link}/${email}`)\r\n          .then(response => {\r\n            // console.log(response)\r\n            if (!response.data.success) {\r\n              Swal.showValidationMessage(\r\n                `Request failed: ${response.data.message}`\r\n              )\r\n              // throw new Error(response.data.message)\r\n            }\r\n            Swal.fire('Password reset accepted!', 'Kindly check your inbox for password reset link', 'success')\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n            Swal.showValidationMessage(\r\n              `Email not registered with us`\r\n            )\r\n          })\r\n      },\r\n      allowOutsideClick: () => !Swal.isLoading()\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        Swal.fire({\r\n          title: `${result.value.login}'s avatar`,\r\n          imageUrl: result.value.avatar_url\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  const onSubmit = data => {\r\n    trigger()\r\n    setLoading(true)\r\n    if (isObjEmpty(errors)) {\r\n      useJwt\r\n        .login({ username: data.username, password: data.password })\r\n        .then(res => {\r\n          setLoading(false)\r\n          // console.log(res)\r\n          if (res.data.blocked) Swal.fire('Please Complete your KYC', 'Kindly contact us for more details', 'error')\r\n          else if (!res.data.success) Swal.fire('Login failed!', 'Invalid username or password', 'error')\r\n          else {\r\n            const data = { ...res.data[0].user, accessToken: res.data[0].token, refreshToken: res.data.refreshToken }\r\n            // console.log(res.data)\r\n            dispatch(handleLogin(data))\r\n            // data.push({ role: \"admin\" })\r\n            // ability.update({ action: \"manage\", subject: \"all\" })\r\n            // history.push(getHomeRouteForLoggedInUser(\"admin\"))\r\n            // useJwt.setAcc\r\n            history.push('/home')\r\n            toast.success(\r\n              <ToastContent name={data.fullname || data.username || 'John Doe'} />,\r\n              { transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n            )\r\n          }\r\n        })\r\n        .catch(err => {\r\n          // console.log(err)\r\n          // if (err.data.blocked) Swal.fire('You are blocked by cashmind', 'Kindly contact us for more details', 'error')\r\n          // else Swal.fire('Network issue', 'Kindly check your network connection', 'error')\r\n          Swal.fire('Network issue', 'Kindly check your network connection', 'error')\r\n          // toast.danger(<ErrorToast />, { transition: Slide, hideProgressBar: true, autoClose: 3000 })\r\n          // console.log(err)\r\n          // < NetworkErrorToast />\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='auth-wrapper auth-v2'>\r\n      <Row className='auth-inner m-0'>\r\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\r\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\r\n            <defs>\r\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\r\n                <stop stopColor='#000000' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\r\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n            </defs>\r\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\r\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\r\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\r\n                  <path\r\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\r\n                    id='Path'\r\n                    className='text-primary'\r\n                    style={{ fill: 'currentColor' }}\r\n                  ></path>\r\n                  <path\r\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\r\n                    id='Path'\r\n                    fill='url(#linearGradient-1)'\r\n                    opacity='0.2'\r\n                  ></path>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.049999997'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.099999994'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-3'\r\n                    fill='url(#linearGradient-2)'\r\n                    opacity='0.099999994'\r\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\r\n                  ></polygon>\r\n                </g>\r\n              </g>\r\n            </g>\r\n          </svg>\r\n          <h2 className='brand-text text-primary ml-1'>Cashmind</h2>\r\n        </Link>\r\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={source} alt='Login V2' />\r\n          </div>\r\n        </Col>\r\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n\r\n            <CardTitle tag='h2' className='font-weight-bold mb-1 mt-5'>\r\n              Welcome to Cashmind! 👋\r\n            </CardTitle>\r\n            <Alert color=\"primary\">\r\n              <CardText className='mb-2 alert-body'>Please sign-in to your account and start the adventure</CardText>\r\n            </Alert>\r\n\r\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n              <FormGroup>\r\n                <Label className='form-label' for='login-email'>\r\n                  Username\r\n                </Label>\r\n                <Input\r\n                  name=\"username\"\r\n                  type='text'\r\n                  id={`login-username`}\r\n                  className={classnames({ 'is-invalid': errors['username'] })}\r\n                  {...register('username')}\r\n                  placeholder=''\r\n                // onChange={e => setUsername(e.target.value)}\r\n                />\r\n                {errors.username && <FormFeedback>{errors.username.message}</FormFeedback>}\r\n\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <div className='d-flex justify-content-between'>\r\n                  <Label className='form-label' for='login-password'>\r\n                    Password\r\n                  </Label>\r\n                  <Link to='#' onClick={handleForgotPassword}>\r\n                    <small>Forgot Password?</small>\r\n                  </Link>\r\n                </div>\r\n\r\n                <Input\r\n                  name=\"password\"\r\n                  type='password'\r\n                  id={`login-password`}\r\n                  className={classnames({ 'is-invalid': errors['password'] })}\r\n                  {...register('password')}\r\n                  placeholder=''\r\n                // onChange={e => setPassword(e.target.value)}\r\n                />\r\n\r\n                {errors.password && <FormFeedback>{errors.password.message}</FormFeedback>}\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <CustomInput type='checkbox' className='custom-control-Primary' id='remember-me' label='Remember Me' />\r\n              </FormGroup>\r\n              <Button.Ripple type='submit' color='primary' block disabled={Loading}>\r\n                {Loading ? <>\r\n                  <Spinner color='white' size='sm' type='grow' />\r\n                  <span className='ml-50'>Signing in...</span>\r\n                </> : 'Sign in'}\r\n              </Button.Ripple>\r\n            </Form>\r\n            <p className='text-center mt-2'>\r\n              <span className='mr-25'>New on our platform?</span>\r\n              <Link to='/signup'>\r\n                <span>Create an account</span>\r\n              </Link>\r\n            </p>\r\n\r\n          </Col>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n"],"sourceRoot":""}